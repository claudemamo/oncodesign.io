<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mule on On Code &amp; Design</title>
    <link>http://oncodesign.io/tags/mule/</link>
    <description>Recent content in Mule on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 May 2015 02:09:00 +0000</lastBuildDate>
    
	<atom:link href="http://oncodesign.io/tags/mule/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Primer to AS2</title>
      <link>http://oncodesign.io/2015/05/15/a-primer-to-as2/</link>
      <pubDate>Fri, 15 May 2015 02:09:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2015/05/15/a-primer-to-as2/</guid>
      <description>This post was reproduced on PortX&amp;rsquo;s blog.
AS2 has been out for a while but I bet most of you have never heard of the spec. Indeed, a couple of months ago I myself was oblivious to it. That is until ModusBox asked me to help them build a first-class AS2 connector for Mule.
AS2 (Applicability Statement 2) is a protocol that operates over HTTP/s and is typically used between organisations to exchange business data in any format securely.</description>
    </item>
    
    <item>
      <title>Scaling up Mule with Async Request Handling/Continuations</title>
      <link>http://oncodesign.io/2014/01/07/scaling-up-mule-with-async-request-handling-continuations/</link>
      <pubDate>Tue, 07 Jan 2014 14:01:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2014/01/07/scaling-up-mule-with-async-request-handling-continuations/</guid>
      <description>Non-blocking I/O servers such as Node.js are appealing because, when compared to blocking I/O servers, they utilise less threads to perform the same tasks under the same load. Less threads mean more efficient use of resources (e.g., smaller memory footprint) and better performance (e.g., reduced no. of context switches between threads). Let&amp;rsquo;s take a stab at having non-blocking I/O behaviour in Mule. Consider the following Mule 3.4 application calling an HTTP service:</description>
    </item>
    
    <item>
      <title>Bridging Mule and MSMQ with ZeroMQ</title>
      <link>http://oncodesign.io/2013/08/27/bridging-mule-and-msmq-with-zeromq/</link>
      <pubDate>Tue, 27 Aug 2013 17:36:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2013/08/27/bridging-mule-and-msmq-with-zeromq/</guid>
      <description>Hearing the words Mule and Microsoft&amp;rsquo;s MSMQ in the same sentence sends a shiver down my spine. I remember once, Mule guru John D&amp;rsquo;Emic and me had spent a considerable amount of time and patience getting Mule and MSMQ to talk to each other through DCOM. The major factor that contributed to this unpleasant experience was our ignorance of the numerous security measures imposed by Windows to restrict DCOM access. The morale of this story is unless you have a veteran Windows administrator at your disposal, avoid the DCOM route.</description>
    </item>
    
    <item>
      <title>How To Publish a WADL with Mule&#39;s REST Router Module </title>
      <link>http://oncodesign.io/2013/03/25/how-to-publish-a-wadl-with-mules-rest-router-module/</link>
      <pubDate>Mon, 25 Mar 2013 15:37:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2013/03/25/how-to-publish-a-wadl-with-mules-rest-router-module/</guid>
      <description>It seems to me that Mule&amp;rsquo;s REST Router module, which I&amp;rsquo;ve previously blogged about, is gaining popularity as a viable alternative to the Jersey module. Yet, the REST Router has a serious limitation in that it&amp;rsquo;s unable to generate a WADL: the REST equivalent of a WSDL. Recently, I had to overcome this limitation owing to a customer requirement for producing client code from the WADL.
Consider the Mule config below:</description>
    </item>
    
    <item>
      <title>Mule ZeroMQ Transport: Lightweight RPC with ØMQ and Protocol Buffers</title>
      <link>http://oncodesign.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-0mq-and-protocol-buffers/</link>
      <pubDate>Tue, 06 Nov 2012 22:12:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-0mq-and-protocol-buffers/</guid>
      <description>Check out John D&amp;rsquo;Emic&amp;rsquo;s awesome&amp;nbsp;blog post demonstrating how&amp;nbsp;ØMQ and Mule could be used for exchanging stock quote data between a front-end and back-end application.</description>
    </item>
    
    <item>
      <title>Setting up a Mule Proxy to Validate SOAP Requests</title>
      <link>http://oncodesign.io/2012/10/12/setting-up-a-mule-proxy-to-validate-soap-requests/</link>
      <pubDate>Fri, 12 Oct 2012 12:01:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/10/12/setting-up-a-mule-proxy-to-validate-soap-requests/</guid>
      <description>Check out my latest post on the Ricston blog:&amp;nbsp;Setting up a Mule Proxy to Validate SOAP Requests.</description>
    </item>
    
    <item>
      <title>Sharing an FTP service between un-clustered Mule instances</title>
      <link>http://oncodesign.io/2012/08/03/sharing-an-ftp-service-between-un-clustered-mule-instances/</link>
      <pubDate>Fri, 03 Aug 2012 10:15:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/08/03/sharing-an-ftp-service-between-un-clustered-mule-instances/</guid>
      <description>One notorious problem&amp;nbsp;when having Mule instances consuming files from the same FTP server is that it&amp;rsquo;s possibile for two or more Mule instances&amp;nbsp;to concurrently download the same file. This leads to duplicate messages: Mule messages representing&amp;nbsp;the same file in different Mule nodes.
The clustering solution offered by Mule EE 3.2 addresses this issue by having Mule instances&amp;nbsp;coordinate among each other on who will download files from the FTP server.&amp;nbsp;</description>
    </item>
    
    <item>
      <title>Mule meet ZeroMQ. ZeroMQ meet Mule.</title>
      <link>http://oncodesign.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</link>
      <pubDate>Sun, 24 Jun 2012 19:17:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</guid>
      <description>These past few weeks I&#39;ve been experimenting with ZeroMQ&amp;nbsp;(a.k.a. ØMQ or ZMQ). I like the idea of a library that provides you the building blocks for constructing your own messaging architecture. For example, we may want to send messages to an application that might be unavailable at times. In our system, losing some messages isn&#39;t the end of the world so we don&#39;t need to have a high degree of message reliability.</description>
    </item>
    
  </channel>
</rss>