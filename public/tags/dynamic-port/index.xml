<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dynamic Port on On Code &amp; Design</title>
    <link>http://oncodesign.io/tags/dynamic-port/</link>
    <description>Recent content in Dynamic Port on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 May 2012 20:43:00 +0000</lastBuildDate>
    
	<atom:link href="http://oncodesign.io/tags/dynamic-port/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Revisiting Dynamic Ports in Mule 3</title>
      <link>http://oncodesign.io/2012/05/28/revisiting-dynamic-ports-in-mule-3/</link>
      <pubDate>Mon, 28 May 2012 20:43:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/05/28/revisiting-dynamic-ports-in-mule-3/</guid>
      <description>Daniel Zapata wrote an interesting&amp;nbsp;post about using dynamic ports when testing your Mule 3 application. Since then, subsequent releases of Mule included support for JUnit 4 which meant improved flexibility in terms of dynamic ports.
Before JUnit 4, an annoying problem with dynamic ports was that you were limited to property placeholder names having the following pattern: &amp;lsquo;port&amp;rsquo; +&amp;nbsp;n where n is an integer. For example:
Using JUnit 4, this problem is solved by leveraging the Rule annotation and the DynamicPort class.</description>
    </item>
    
  </channel>
</rss>