<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on On Code &amp; Design</title>
    <link>http://oncodesign.io/tags/java/</link>
    <description>Recent content in Java on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 09 Nov 2015 13:42:00 +0000</lastBuildDate>
    
	<atom:link href="http://oncodesign.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing a Replicated Token Service with JSON Web Tokens</title>
      <link>http://oncodesign.io/2015/11/09/implementing-a-replicated-token-service-with-json-web-tokens/</link>
      <pubDate>Mon, 09 Nov 2015 13:42:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2015/11/09/implementing-a-replicated-token-service-with-json-web-tokens/</guid>
      <description>Last week I observed one of the 8 fallacies of distributed systems in action:
&#34;Topology doesn&#39;t change&#34;A client of mine deployed the latest versions of his web services to a highly-available QA environment. Sanity tests gave initial confirmation that the system was behaving as expected. But then, the QA team reported weird behaviour in the system&#39;s offline functionality. So I was called in the figure out the problem. The logs showed an application getting random HTTP 401s from the system&#39;s token service.</description>
    </item>
    
    <item>
      <title>The Trials of Smooks</title>
      <link>http://oncodesign.io/2014/09/16/the-trials-of-smooks/</link>
      <pubDate>Tue, 16 Sep 2014 17:28:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2014/09/16/the-trials-of-smooks/</guid>
      <description>The fact that I&amp;rsquo;m a hard to please guy explains why I rarely show appreciation for a tool. I easily get frustrated when a tool fails to meet the challenges it&amp;rsquo;s meant to solve. Smooks is one of the few tools I appreciate. It&amp;rsquo;s an invaluable transformation framework in the integrator&amp;rsquo;s arsenal. On a project I was on, I threw at Smooks [1] all manner of challenges, and one after another, Smooks overcame them without giving up a key requirement: maintaining a low memory overhead during transformation.</description>
    </item>
    
    <item>
      <title>Log4j 2 Memory-Mapped File Appender</title>
      <link>http://oncodesign.io/2013/12/23/log4j-2-memory-mapped-file-appender/</link>
      <pubDate>Mon, 23 Dec 2013 11:38:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2013/12/23/log4j-2-memory-mapped-file-appender/</guid>
      <description>During the weekend I dug into Java NIO, specifically, mapping files to memory to reduce I/O time. What&amp;rsquo;s more, since I had a lot of free time on my hands, I developed a&amp;nbsp;Log4j 2&amp;nbsp;memory-mapped file appender. On my machine, performance tests running on a single thread using the MemoryMappedFile appender show an improvement by a factor of 3 when compared to the&amp;nbsp;RandomAccessFile&amp;nbsp;appender.</description>
    </item>
    
    <item>
      <title>Apache Kafka for Event Sourcing</title>
      <link>http://oncodesign.io/2013/12/11/apache-kafka-for-event-sourcing/</link>
      <pubDate>Wed, 11 Dec 2013 21:01:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2013/12/11/apache-kafka-for-event-sourcing/</guid>
      <description>Event Sourcing is a pattern intended for &#34;capturing all changes to an application state as a sequence of events&#34;. As explained by Fowler, the pattern is useful when you want the ability to completely rebuild the application state, perform temporal querying, or replay events. The LMAX platform is a famous example where Event Sourcing is applied to keep all application state in-memory and consequently contributing to the system&#39;s surprisingly high throughput and low latency.</description>
    </item>
    
    <item>
      <title>JRuby Complex Classes in Java Method Signatures</title>
      <link>http://oncodesign.io/2013/08/19/jruby-complex-classes-in-java-method-signatures/</link>
      <pubDate>Mon, 19 Aug 2013 11:41:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2013/08/19/jruby-complex-classes-in-java-method-signatures/</guid>
      <description>As documented in the JRuby wiki,&amp;nbsp;java_signature&amp;nbsp;changes a method&amp;rsquo;s signature to match the signature string passed to it:
Observe that the classes in the method signature&amp;nbsp;are primitive. What if we use a complex class as a parameter type?
Running the above code will give you the following NoMethodError message:
 The way I went about using complex classes in signatures is to utilise&amp;nbsp;add_method_signature&amp;nbsp;instead of&amp;nbsp;java_signature:
add_method_signature&amp;nbsp;expects the first argument to be the name of the method that will have its signature changed.</description>
    </item>
    
  </channel>
</rss>