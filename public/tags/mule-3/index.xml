<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mule 3 on On Code &amp; Design</title>
    <link>http://oncodesign.io/tags/mule-3/</link>
    <description>Recent content in Mule 3 on On Code &amp; Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jan 2014 14:01:00 +0000</lastBuildDate>
    
	<atom:link href="http://oncodesign.io/tags/mule-3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scaling up Mule with Async Request Handling/Continuations</title>
      <link>http://oncodesign.io/2014/01/07/scaling-up-mule-with-async-request-handling-continuations/</link>
      <pubDate>Tue, 07 Jan 2014 14:01:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2014/01/07/scaling-up-mule-with-async-request-handling-continuations/</guid>
      <description>Non-blocking I/O servers such as Node.js are appealing because, when compared to blocking I/O servers, they utilise less threads to perform the same tasks under the same load. Less threads mean more efficient use of resources (e.g., smaller memory footprint) and better performance (e.g., reduced no. of context switches between threads). Let&amp;rsquo;s take a stab at having non-blocking I/O behaviour in Mule. Consider the following Mule 3.4 application calling an HTTP service:</description>
    </item>
    
    <item>
      <title>Mule ZeroMQ Transport: Lightweight RPC with ØMQ and Protocol Buffers</title>
      <link>http://oncodesign.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-0mq-and-protocol-buffers/</link>
      <pubDate>Tue, 06 Nov 2012 22:12:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/11/06/mule-zeromq-transport-lightweight-rpc-with-0mq-and-protocol-buffers/</guid>
      <description>Check out John D&amp;rsquo;Emic&amp;rsquo;s awesome&amp;nbsp;blog post demonstrating how&amp;nbsp;ØMQ and Mule could be used for exchanging stock quote data between a front-end and back-end application.</description>
    </item>
    
    <item>
      <title>Setting up a Mule Proxy to Validate SOAP Requests</title>
      <link>http://oncodesign.io/2012/10/12/setting-up-a-mule-proxy-to-validate-soap-requests/</link>
      <pubDate>Fri, 12 Oct 2012 12:01:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/10/12/setting-up-a-mule-proxy-to-validate-soap-requests/</guid>
      <description>Check out my latest post on the Ricston blog:&amp;nbsp;Setting up a Mule Proxy to Validate SOAP Requests.</description>
    </item>
    
    <item>
      <title>Rest Module: A lightweight alternative to Mule’s Jersey Module</title>
      <link>http://oncodesign.io/2012/07/18/rest-module-a-lightweight-alternative-to-mules-jersey-module/</link>
      <pubDate>Wed, 18 Jul 2012 09:55:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/07/18/rest-module-a-lightweight-alternative-to-mules-jersey-module/</guid>
      <description>Check out my latest post on the Ricston blog:&amp;nbsp;Rest Module: A lightweight alternative to Mule’s Jersey Module.</description>
    </item>
    
    <item>
      <title>Mule meet ZeroMQ. ZeroMQ meet Mule.</title>
      <link>http://oncodesign.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</link>
      <pubDate>Sun, 24 Jun 2012 19:17:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/06/24/mule-meet-zeromq.-zeromq-meet-mule./</guid>
      <description>These past few weeks I&#39;ve been experimenting with ZeroMQ&amp;nbsp;(a.k.a. ØMQ or ZMQ). I like the idea of a library that provides you the building blocks for constructing your own messaging architecture. For example, we may want to send messages to an application that might be unavailable at times. In our system, losing some messages isn&#39;t the end of the world so we don&#39;t need to have a high degree of message reliability.</description>
    </item>
    
    <item>
      <title>Mule ISO 8583 Module</title>
      <link>http://oncodesign.io/2012/06/13/mule-iso-8583-module/</link>
      <pubDate>Wed, 13 Jun 2012 11:09:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/06/13/mule-iso-8583-module/</guid>
      <description>Check out my latest post on the Ricston blog: Mule ISO 8583 Module</description>
    </item>
    
    <item>
      <title>Revisiting Dynamic Ports in Mule 3</title>
      <link>http://oncodesign.io/2012/05/28/revisiting-dynamic-ports-in-mule-3/</link>
      <pubDate>Mon, 28 May 2012 20:43:00 +0000</pubDate>
      
      <guid>http://oncodesign.io/2012/05/28/revisiting-dynamic-ports-in-mule-3/</guid>
      <description>Daniel Zapata wrote an interesting&amp;nbsp;post about using dynamic ports when testing your Mule 3 application. Since then, subsequent releases of Mule included support for JUnit 4 which meant improved flexibility in terms of dynamic ports.
Before JUnit 4, an annoying problem with dynamic ports was that you were limited to property placeholder names having the following pattern: &amp;lsquo;port&amp;rsquo; +&amp;nbsp;n where n is an integer. For example:
Using JUnit 4, this problem is solved by leveraging the Rule annotation and the DynamicPort class.</description>
    </item>
    
  </channel>
</rss>